import TelegramBot from "node-telegram-bot-api";
import { getEnvVariable } from "./env";
import { SupabaseClient } from "@supabase/supabase-js";

// –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º
const token = getEnvVariable("TELEGRAM_BOT_TOKEN");
const bot = new TelegramBot(token, { polling: false });

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL
const webhookUrl = `${process.env.NEXT_PUBLIC_APP_URL}/api/telegram/webhook`;
bot.setWebHook(webhookUrl, {
  certificate: undefined,
  max_connections: 40,
});

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
 */
export async function sendTelegramMessage(chatId: string, message: string): Promise<boolean> {
  try {
    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –≤ 5 —Å–µ–∫—É–Ω–¥
    const controller = new AbortController();
    const timeoutId = setTimeout(() => controller.abort(), 5000);

    await bot.sendMessage(chatId, message, { 
      parse_mode: "HTML",
      disable_web_page_preview: true, // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–æ–∫
      disable_notification: true // –û—Ç–∫–ª—é—á–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    });

    clearTimeout(timeoutId);
    return true;
  } catch (error) {
    console.error("Telegram error:", error);
    return false;
  }
}

/**
 * –û–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–¥–∞ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏
 */
export async function sendVerificationCode(telegramId: string, code: string): Promise<boolean> {
  const message = `<b>–ö–æ–¥: ${code}</b>`;
  return sendTelegramMessage(telegramId, message);
}

export async function requestContact(chatId: number) {
  const keyboard = {
    keyboard: [
      [
        {
          text: "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
          request_contact: true,
        },
      ],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  await bot.sendMessage(
    chatId,
    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    { reply_markup: keyboard },
  );
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
 */
export async function handleStartCommand(
  supabase: SupabaseClient,
  chatId: number,
  startParam: string,
  firstName: string,
  lastName?: string,
  username?: string
): Promise<void> {
  try {
    // –ü–∞—Ä—Å–∏–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Å—Ç–∞—Ä—Ç–∞ (action_phone)
    const [action, phone] = startParam.split("_");
    
    if (!action || !phone) {
      await bot.sendMessage(
        chatId,
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TULPAR EXPRESS! –î–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ –Ω–∞—à —Å–∞–π—Ç."
      );
      return;
    }

    if (action === "register") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º
      const { data: existingUser } = await supabase
        .from("users")
        .select("id")
        .eq("phone", phone)
        .single();

      if (existingUser) {
        await bot.sendMessage(
          chatId,
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç. –ï—Å–ª–∏ —ç—Ç–æ –≤–∞—à –Ω–æ–º–µ—Ä, –≤—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é '–ü–æ–¥–∫–ª—é—á–∏—Ç—å Telegram' –Ω–∞ —Å–∞–π—Ç–µ."
        );
        return;
      }

      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: createError } = await supabase.from("users").insert({
        telegram_id: chatId,
        phone,
        first_name: firstName,
        last_name: lastName || "",
        username: username || "",
        role: "user",
        created_at: new Date().toISOString(),
      });

      if (createError) {
        console.error("Error creating user:", createError);
        await bot.sendMessage(
          chatId,
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        );
        return;
      }

      await bot.sendMessage(
        chatId,
        `–°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç –∏ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É, –∏—Å–ø–æ–ª—å–∑—É—è –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ${phone}`
      );
    } else if (action === "connect") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { data: existingUser } = await supabase
        .from("users")
        .select("telegram_id")
        .eq("phone", phone)
        .single();

      if (!existingUser) {
        await bot.sendMessage(
          chatId,
          "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–∞–π—Ç–µ."
        );
        return;
      }

      if (existingUser.telegram_id === chatId) {
        await bot.sendMessage(
          chatId,
          "–≠—Ç–æ—Ç Telegram –∞–∫–∫–∞—É–Ω—Ç —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –ø—Ä–æ—Ñ–∏–ª—é. –í—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç –∏ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É."
        );
        return;
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: updateError } = await supabase
        .from("users")
        .update({
          telegram_id: chatId,
          first_name: firstName,
          last_name: lastName || "",
          username: username || "",
          updated_at: new Date().toISOString(),
        })
        .eq("phone", phone);

      if (updateError) {
        console.error("Error updating user:", updateError);
        await bot.sendMessage(
          chatId,
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ Telegram. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
        );
        return;
      }

      await bot.sendMessage(
        chatId,
        `Telegram —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ –≤–∞—à–µ–º—É –∞–∫–∫–∞—É–Ω—Ç—É! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –Ω–∞ —Å–∞–π—Ç –∏ –≤–æ–π—Ç–∏ –≤ —Å–∏—Å—Ç–µ–º—É.`
      );
    }
  } catch (error) {
    console.error("Error handling start command:", error);
    await bot.sendMessage(
      chatId,
      "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –æ–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É."
    );
  }
}

/**
 * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—Ç Telegram
 */
export async function handleTelegramUpdate(update: any, supabase: SupabaseClient): Promise<void> {
  try {
    if (!update?.message) return;

    const chatId = update.message.chat.id;
    if (!chatId) return;

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã /start
    if (update.message.text?.startsWith("/start")) {
      const startParam = update.message.text.split(" ")[1];
      const firstName = update.message.from.first_name;
      const lastName = update.message.from.last_name;
      const username = update.message.from.username;

      await handleStartCommand(
        supabase,
        chatId,
        startParam,
        firstName,
        lastName,
        username
      );
      return;
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ –∫–æ–º–∞–Ω–¥–∞ /start, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await bot.sendMessage(
      chatId,
      "–î–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à —Å–∞–π—Ç: " + 
      process.env.NEXT_PUBLIC_APP_URL
    );
  } catch (error) {
    console.error("Error handling Telegram update:", error);
    // –ù–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Å–ø–∞–º–∞
  }
}
