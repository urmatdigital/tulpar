import TelegramBot from "node-telegram-bot-api";
import { createClient } from "@supabase/supabase-js";

const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.SUPABASE_SECRET_KEY!,
);

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
const bot = new TelegramBot(process.env.TELEGRAM_BOT_TOKEN!, {
  webHook: {
    port: 443,
  },
});

// –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook URL
const webhookUrl = `${process.env.NEXT_PUBLIC_APP_URL}/api/telegram/webhook`;
bot.setWebHook(webhookUrl, {
  certificate: undefined,
  max_connections: 40,
});

export async function sendTelegramMessage(text: string, chatId?: number) {
  try {
    await bot.sendMessage(chatId || process.env.TELEGRAM_CHAT_ID!, text);
    return true;
  } catch (error) {
    console.error("Error sending Telegram message:", error);
    return false;
  }
}

export async function requestContact(chatId: number) {
  const keyboard = {
    keyboard: [
      [
        {
          text: "üì± –û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
          request_contact: true,
        },
      ],
    ],
    resize_keyboard: true,
    one_time_keyboard: true,
  };

  await bot.sendMessage(
    chatId,
    "–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞",
    { reply_markup: keyboard },
  );
}

export async function handleTelegramUpdate(update: any) {
  try {
    const message = update.message;

    if (!message) {
      return { error: "No message in update" };
    }

    const chatId = message.chat.id;

    // –ï—Å–ª–∏ –ø–æ–ª—É—á–µ–Ω –∫–æ–Ω—Ç–∞–∫—Ç
    if (message.contact) {
      const { phone_number, user_id, first_name, last_name } = message.contact;

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ user_id —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª–µ–º
      if (user_id !== message.from.id) {
        await sendTelegramMessage(
          "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –∫–æ–Ω—Ç–∞–∫—Ç",
          chatId,
        );
        return { error: "Invalid contact" };
      }

      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const { error: userError } = await supabase.from("users").upsert({
        phone: phone_number,
        telegram_id: user_id,
        first_name,
        last_name,
        username: message.from.username,
        auth_date: Math.floor(Date.now() / 1000),
      });

      if (userError) {
        console.error("Error saving user:", userError);
        await sendTelegramMessage(
          "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
          chatId,
        );
        return { error: userError };
      }

      // –ü–æ–ª—É—á–∞–µ–º –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –¥–ª—è —ç—Ç–æ–≥–æ –Ω–æ–º–µ—Ä–∞
      const { data: verificationData } = await supabase
        .from("verification_codes")
        .select()
        .eq("phone", phone_number)
        .eq("used", false)
        .gt("expires_at", new Date().toISOString())
        .order("created_at", { ascending: false })
        .limit(1)
        .single();

      if (verificationData) {
        // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        await sendTelegramMessage(
          `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${verificationData.code}`,
          chatId,
        );
        return { success: true };
      } else {
        await sendTelegramMessage(
          "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∏—Å—Ç–µ–∫. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø—Ä–æ—Å–∏—Ç–µ –Ω–æ–≤—ã–π –∫–æ–¥ –Ω–∞ —Å–∞–π—Ç–µ.",
          chatId,
        );
        return { error: "No valid verification code found" };
      }
    }

    // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ /start
    if (message.text === "/start") {
      await sendTelegramMessage(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ TULPAR EXPRESS! üöÄ\n\n–î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞.",
        chatId,
      );
      await requestContact(chatId);
      return { success: true };
    }

    // –î–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    await sendTelegramMessage(
      "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞' –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏",
      chatId,
    );
    await requestContact(chatId);
    return { success: true };
  } catch (error) {
    console.error("Error handling Telegram update:", error);
    return { error: "Internal server error" };
  }
}
